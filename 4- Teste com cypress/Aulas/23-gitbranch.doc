## Git Branch e Git Checkout

### Git Branch
O comando `git branch` é utilizado para listar, criar ou deletar branches (ramificações) no repositório Git. Branches permitem que você trabalhe em diferentes versões do seu projeto de forma isolada.

#### Sintaxe
```sh
git branch [nome-da-branch]
```

#### Exemplos de Uso
- Listar todas as branches:
  ```sh
  git branch
  ```
- Criar uma nova branch:
  ```sh
  git branch minha-nova-branch
  ```
- Deletar uma branch:
  ```sh
  git branch -d minha-nova-branch
  ```

### Git Checkout
O comando `git checkout` é utilizado para trocar de branch ou restaurar arquivos no repositório de acordo com um commit específico.

#### Sintaxe
```sh
git checkout [nome-da-branch]
```

#### Exemplos de Uso
- Trocar para uma branch existente:
  ```sh
  git checkout minha-nova-branch
  ```
- Criar e trocar para uma nova branch:
  ```sh
  git checkout -b minha-nova-branch
  ```
- Restaurar um arquivo para o estado de um commit específico:
  ```sh
  git checkout [commit-hash] -- caminho/do/arquivo
  ```

### Uso Combinado
Um fluxo de trabalho comum é criar uma nova branch para desenvolver uma nova funcionalidade, trabalhar nela e depois mesclar as alterações de volta para a branch principal.

#### Exemplo Completo
1. Criar e trocar para uma nova branch:
   ```sh
   git checkout -b nova-funcionalidade
   ```
2. Fazer alterações e commit:
   ```sh
   git add .
   git commit -m "Adicionar nova funcionalidade"
   ```
3. Trocar de volta para a branch principal:
   ```sh
   git checkout main
   ```
4. Mesclar as alterações da nova branch:
   ```sh
   git merge nova-funcionalidade
   ```

Esses comandos são essenciais para um fluxo de trabalho eficiente com Git, permitindo a gestão de diferentes versões e funcionalidades do projeto de forma organizada.
